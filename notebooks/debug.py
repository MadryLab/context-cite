from context_cite import ContextCiter

# %% [markdown]
# For this example, we'll use a TinyLlama chat model.

# %%
model_name_or_path = "TinyLlama/TinyLlama-1.1B-Chat-v1.0"

context = """
Attention Is All You Need

Abstract
The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over the existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs, a small fraction of the training costs of the best models from the literature. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data.
1 Introduction
Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [35, 2, 5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [38, 24, 15].
Recurrent models typically factor computation along the symbol positions of the input and output sequences. Aligning the positions to steps in computation time, they generate a sequence of hidden states ht, as a function of the previous hidden state ht-1 and the input for position t. This inherently sequential nature precludes parallelization within training examples, which becomes critical at longer sequence lengths, as memory constraints limit batching across examples. Recent work has achieved significant improvements in computational efficiency through factorization tricks [21] and conditional computation [32], while also improving model performance in case of the latter. The fundamental constraint of sequential computation, however, remains.
Attention mechanisms have become an integral part of compelling sequence modeling and transduction models in various tasks, allowing modeling of dependencies without regard to their distance in the input or output sequences [2, 19]. In all but a few cases [27], however, such attention mechanisms are used in conjunction with a recurrent network.
In this work we propose the Transformer, a model architecture eschewing recurrence and instead relying entirely on an attention mechanism to draw global dependencies between input and output. The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs.
"""
query = "What type of GPUs did the authors use in this paper?"

# %% [markdown]
# ### The `ContextCiter` class

# %% [markdown]
# We can directly instantiate the `ContextCiter` class with a huggingface-style `pretrained_model_name_or_path`, together with a `context`, and a `query` (passed in as strings).

# %%
cc = ContextCiter.from_pretrained(model_name_or_path, context, query, device='cpu')

# %% [markdown]
# Alternatively, we can pass in a `model` and a `tokenizer`, which are instantiated from the `huggingface` library:

# %%
from transformers import AutoTokenizer, AutoModelForCausalLM
tokenizer = AutoTokenizer.from_pretrained(model_name_or_path)
model = AutoModelForCausalLM.from_pretrained(model_name_or_path)
# model.to("cuda")
cc = ContextCiter(model, tokenizer, context, query)

# %% [markdown]
# The `response` property of the ContextCiter class contains the response generated by the model. It is lazily generated when you access it.

# %%
cc.response

# %% [markdown]
# Under the hood, the `ContextCiter` class applies a chat template to the
# tokenized context and query, and then uses the model to generate a response.
# That response is then stored in the `response` property.

# %% [markdown]
# ### Attributing the response to sources within the context

# %% [markdown]
# To attribute the entire response and present the attributions in a human-readable format, we can use the `get_attributions` method, and pass in `as_dataframe=True`, as well as `top_k` to limit the number of sources to include in the attributions.

# %%
results = cc.get_attributions(as_dataframe=True, top_k=5)
results

# %% [markdown]
# `results` is a pandas styler object; to access the underlying dataframe:

# %%
results.data

# %% [markdown]
# Alternatively, `.get_attributions()` can return the attribution scores as a `numpy` array, where the `i`th entry corresponds to the attribution score for the `i`th source in the context.

# %%
raw_results = cc.get_attributions()
raw_results

# %% [markdown]
# We can then match these attributions to the sources using the `sources` property:

# %%
list(zip(cc.sources, raw_results))[:5]

# %% [markdown]
# ### Attributing parts of the response

# %% [markdown]
# `.get_attributions()` optionally takes in `start_idx` and `end_idx` to
# attribute only a part of the response.

# %% [markdown]
# To make it easier to attribute parts of the response, the `ContextCiter` class
# has a utility property `response_with_indices` that contains the response annotated with
# the index of each word within the response. You can access this with
# `cc.response_with_indices`.

# %%
print(cc.response_with_indices)

# %% [markdown]
# For example, we can attribute a part of the response like so:

# %%
start, end = 17, 32
cc.get_attributions(start_idx=start, end_idx=end, as_dataframe=True, top_k=5)

# %%
start, end = 83, 129
cc.get_attributions(start_idx=start, end_idx=end, as_dataframe=True, top_k=5)


